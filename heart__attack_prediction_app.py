# -*- coding: utf-8 -*-
"""Heart_ Attack_Prediction_app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WkgvIUqbFhV1xDMfWsFXXK1_Xct1xkJ2
"""
import subprocess
import sys
import streamlit as st

st.set_page_config(page_title="Heart Attack Prediction App", page_icon=":hospital:", layout="wide")

@st.cache
def install(package):
    subprocess.check_call([sys.executable, "-m", "pip", "install", package])
    
install('pickle-mixin')
install('sklearn')

import pickle
import os
import numpy as np
import warnings
warnings.filterwarnings('ignore')

MODEL_PATH=os.path.join(os.getcwd(),'model','best_estimator.pkl')
with open(MODEL_PATH,'rb') as file:
    model=pickle.load(file)

import joblib
import pandas as pd
from PIL import Image

col1, col2 = st.columns(2)

with col1:
    st.title('Diabetes Prediction App')
    st.write('The data for the following example is originally from the National Institute of Diabetes and Digestive and Kidney Diseases and contains information on females at least 21 years old of Pima Indian heritage. This is a sample application and cannot be used as a substitute for real medical advice.')

with col2:
    st.subheader('Please fill in the details of the person under consideration and click on the button below!')
    with st.form("Diabetes Predictor App"):
        age =           st.number_input("Age in Years", 1, 150, 25, 1)
        glucose =       st.slider("Glucose Level", 0, 200, 25, 1)
        skinthickness = st.slider("Skin Thickness", 0, 99, 20, 1)
        bloodpressure = st.slider('Blood Pressure', 0, 122, 69, 1)
        insulin =       st.slider("Insulin", 0, 846, 79, 1)
        bmi =           st.slider("BMI", 0.0, 67.1, 31.4, 0.1)
        dpf =           st.slider("Diabetics Pedigree Function", 0.000, 2.420, 0.471, 0.001)

        row = [glucose, bloodpressure, skinthickness, insulin, bmi, dpf, age]


        # Every form must have a submit button.
        submitted = st.form_submit_button("Analyse")
        if submitted:
            new_data=np.expand_dims(row,axis=0)
            outcome=model.predict(new_data)[0]

            if outcome==0:
                st.subheader("You're healthy! Keep it Up!!")
                image = Image.open('healthy.png')
                st.image(image)
            else:
                st.subheader('From our database, you are not healthy so go work yourself out!')
                image1 = Image.open('nothealthy.png')
                st.image(image1)
